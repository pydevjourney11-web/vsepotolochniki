from flask import Blueprint, request, jsonify
from flask_jwt_extended import jwt_required, get_jwt_identity, verify_jwt_in_request
from backend.models import db, Article, Comment, User
import json
import requests

forum_bp = Blueprint('forum', __name__)

@forum_bp.route('/articles', methods=['GET'])
def get_articles():
    page = request.args.get('page', 1, type=int)
    per_page = request.args.get('per_page', 10, type=int)
    tag = request.args.get('tag')
    search = request.args.get('search')
    
    query = Article.query.filter_by(status='approved')
    
    if tag:
        query = query.filter(Article.tags.contains(tag))
    
    if search:
        # –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é, —Ç–µ–≥–∞–º –∏ –∞–≤—Ç–æ—Ä—É
        search_term = f"%{search}%"
        query = query.filter(
            db.or_(
                Article.title.ilike(search_term),
                Article.content.ilike(search_term),
                Article.tags.ilike(search_term),
                Article.excerpt.ilike(search_term)
            )
        )
    
    articles = query.order_by(Article.created_at.desc()).paginate(
        page=page, per_page=per_page, error_out=False
    )
    
    return jsonify({
        'articles': [{
            'id': article.id,
            'title': article.title,
            'excerpt': article.excerpt,
            'cover_image': article.cover_image,
            'tags': json.loads(article.tags) if article.tags else [],
            'views': article.views,
            'author': {
                'id': article.author.id if article.author else None,
                'name': article.author.name if article.author else article.anonymous_author,
                'avatar': article.author.avatar if article.author else None
            },
            'created_at': article.created_at.isoformat(),
            'comment_count': len(article.comments)
        } for article in articles.items],
        'total': articles.total,
        'pages': articles.pages,
        'current_page': page
    })

@forum_bp.route('/articles/<int:article_id>', methods=['GET'])
def get_article(article_id):
    article = Article.query.get_or_404(article_id)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    article.views += 1
    db.session.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    comments = Comment.query.filter_by(article_id=article_id, status='approved').order_by(Comment.created_at.asc()).all()
    
    return jsonify({
        'id': article.id,
        'title': article.title,
        'content': article.content,
        'excerpt': article.excerpt,
        'cover_image': article.cover_image,
        'tags': json.loads(article.tags) if article.tags else [],
        'views': article.views,
        'status': article.status,
        'author': {
            'id': article.author.id if article.author else None,
            'name': article.author.name if article.author else article.anonymous_author,
            'avatar': article.author.avatar if article.author else None
        },
        'comments': [comment.to_dict() for comment in comments],
        'created_at': article.created_at.isoformat(),
        'updated_at': article.updated_at.isoformat()
    })

@forum_bp.route('/articles', methods=['POST'])
def create_article():
    data = request.get_json()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {dict(request.headers)}")
    print(f"üìù –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {data}")
    
    if not data or not data.get('title') or not data.get('content'):
        return jsonify({'error': 'Title and content are required'}), 400
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    user_id = None
    anonymous_author = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ verify_jwt_in_request
    try:
        verify_jwt_in_request()
        user_id = get_jwt_identity()
        user_id = int(user_id)
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {user_id}")
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–ø—á—É
    except Exception as e:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {e}")
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –∞–Ω–æ–Ω–∏–º–Ω–∞—è —Å—Ç–∞—Ç—å—è
        # –ö–∞–ø—á–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        print("üîì –ö–∞–ø—á–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Å—Ç–∞—Ç–µ–π - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Å—Ç–∞—Ç—å–∏
        anonymous_author = data.get('anonymous_author', '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –∞–≤—Ç–æ—Ä')
    
    article = Article(
        title=data['title'],
        content=data['content'],
        excerpt=data.get('excerpt', data['content'][:200] + '...'),
        cover_image=data.get('cover_image'),
        tags=json.dumps(data.get('tags', [])),
        author_id=user_id,
        anonymous_author=anonymous_author,
        status='approved'  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä—è–µ–º —Å—Ç–∞—Ç—å–∏
    )
    
    db.session.add(article)
    db.session.commit()
    
    return jsonify({
        'message': 'Article created successfully',
        'article': {
            'id': article.id,
            'title': article.title,
            'excerpt': article.excerpt,
            'tags': json.loads(article.tags),
            'created_at': article.created_at.isoformat()
        }
    }), 201

@forum_bp.route('/articles/<int:article_id>', methods=['PUT'])
@jwt_required()
def update_article(article_id):
    user_id = get_jwt_identity()
    article = Article.query.get_or_404(article_id)
    user = User.query.get(int(user_id))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (–∞–≤—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
    if article.author_id != int(user_id) and user.role != 'admin':
        return jsonify({'error': 'Access denied'}), 403
    
    data = request.get_json()
    
    if 'title' in data:
        article.title = data['title']
    if 'content' in data:
        article.content = data['content']
        article.excerpt = data.get('excerpt', data['content'][:200] + '...')
    if 'cover_image' in data:
        article.cover_image = data['cover_image']
    if 'tags' in data:
        article.tags = json.dumps(data['tags'])
    if 'status' in data:
        article.status = data['status']
    
    db.session.commit()
    
    return jsonify({
        'message': 'Article updated successfully',
        'article': {
            'id': article.id,
            'title': article.title,
            'excerpt': article.excerpt,
            'tags': json.loads(article.tags)
        }
    })

@forum_bp.route('/articles/<int:article_id>', methods=['DELETE'])
@jwt_required()
def delete_article(article_id):
    user_id = get_jwt_identity()
    article = Article.query.get_or_404(article_id)
    user = User.query.get(int(user_id))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (–∞–≤—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
    if article.author_id != int(user_id) and user.role != 'admin':
        return jsonify({'error': 'Access denied'}), 403
    
    db.session.delete(article)
    db.session.commit()
    
    return jsonify({'message': 'Article deleted successfully'})

# –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏
@forum_bp.route('/articles/<int:article_id>/moderate', methods=['POST'])
@jwt_required()
def moderate_article(article_id):
    user_id = get_jwt_identity()
    user = User.query.get(int(user_id))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user.role != 'admin':
        return jsonify({'error': 'Access denied'}), 403
    
    data = request.get_json()
    status = data.get('status')
    
    if status not in ['pending', 'approved', 'rejected']:
        return jsonify({'error': '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å'}), 400
    
    article = Article.query.get_or_404(article_id)
    article.status = status
    
    db.session.commit()
    
    article_data = {
        'id': article.id,
        'title': article.title,
        'content': article.content,
        'excerpt': article.excerpt,
        'cover_image': article.cover_image,
        'tags': json.loads(article.tags) if article.tags else [],
        'status': article.status,
        'author': {
            'id': article.author.id,
            'name': article.author.name,
            'avatar': article.author.avatar
        },
        'views': article.views,
        'created_at': article.created_at.isoformat(),
        'updated_at': article.updated_at.isoformat()
    }
    
    return jsonify({'message': '–°—Ç–∞—Ç—É—Å —Å—Ç–∞—Ç—å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω', 'article': article_data})

@forum_bp.route('/articles/<int:article_id>/comments', methods=['POST'])
def create_comment(article_id):
    data = request.get_json()
    
    if not data or not data.get('text'):
        return jsonify({'error': 'Comment text is required'}), 400
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—å—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    article = Article.query.get_or_404(article_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    user_id = None
    anonymous_name = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ verify_jwt_in_request
    try:
        verify_jwt_in_request()
        user_id = get_jwt_identity()
        user_id = int(user_id)
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {user_id}")
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–ø—á—É
    except Exception as e:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        # –ö–∞–ø—á–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        print("üîì –ö–∞–ø—á–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        anonymous_name = data.get('anonymous_name', '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    
    comment = Comment(
        article_id=article_id,
        user_id=user_id,
        anonymous_name=anonymous_name,
        text=data['text']
    )
    
    db.session.add(comment)
    db.session.commit()
    
    return jsonify({
        'message': 'Comment created successfully',
        'comment': comment.to_dict()
    }), 201

@forum_bp.route('/comments/<int:comment_id>', methods=['PUT'])
@jwt_required()
def update_comment(comment_id):
    user_id = get_jwt_identity()
    comment = Comment.query.get_or_404(comment_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if comment.user_id != int(user_id):
        return jsonify({'error': 'Access denied'}), 403
    
    data = request.get_json()
    
    if 'text' in data:
        comment.text = data['text']
    
    db.session.commit()
    
    return jsonify({
        'message': 'Comment updated successfully',
        'comment': comment.to_dict()
    })

@forum_bp.route('/comments/<int:comment_id>', methods=['GET'])
@jwt_required()
def get_comment(comment_id):
    user_id = get_jwt_identity()
    comment = Comment.query.get_or_404(comment_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if comment.user_id != int(user_id):
        return jsonify({'error': 'Access denied'}), 403
    
    return jsonify({
        'comment': comment.to_dict()
    })

@forum_bp.route('/comments/<int:comment_id>', methods=['DELETE'])
@jwt_required()
def delete_comment(comment_id):
    user_id = get_jwt_identity()
    comment = Comment.query.get_or_404(comment_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if comment.user_id != int(user_id):
        return jsonify({'error': 'Access denied'}), 403
    
    db.session.delete(comment)
    db.session.commit()
    
    return jsonify({'message': 'Comment deleted successfully'})

@forum_bp.route('/tags', methods=['GET'])
def get_tags():
    articles = Article.query.filter_by(status='approved').all()
    all_tags = []
    
    for article in articles:
        if article.tags:
            tags = json.loads(article.tags)
            all_tags.extend(tags)
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    unique_tags = sorted(list(set(all_tags)))
    
    return jsonify(unique_tags)

from flask import Flask, request, jsonify, send_from_directory
from flask_migrate import Migrate
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity
from flask_cors import CORS
from werkzeug.security import generate_password_hash, check_password_hash
from werkzeug.utils import secure_filename
import os
from datetime import datetime, timedelta
import json

# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
FRONTEND_DIR = os.path.join(BASE_DIR, 'frontend')

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your-secret-key-change-in-production'
# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ PostgreSQL –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞, SQLite –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL', 'sqlite:///database.db')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['JWT_SECRET_KEY'] = 'jwt-secret-string-change-in-production'
app.config['JWT_ACCESS_TOKEN_EXPIRES'] = timedelta(hours=24)
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É –≤ –ø—Ä–æ–µ–∫—Ç–µ
UPLOAD_FOLDER = os.path.join(BASE_DIR, 'static', 'uploads')
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
try:
    os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
    print(f"‚úÖ –ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫ —Å–æ–∑–¥–∞–Ω–∞: {app.config['UPLOAD_FOLDER']}")
    print(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è RENDER: {os.environ.get('RENDER')}")
    print(f"‚úÖ –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"‚úÖ BASE_DIR: {BASE_DIR}")
except Exception as e:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫: {e}")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º db –∏–∑ models
from backend.models import db, User, Company, Review, Article, Comment

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
db.init_app(app)
migrate = Migrate(app, db)
jwt = JWTManager(app)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã
from backend.routes.auth import auth_bp
from backend.routes.catalog import catalog_bp
from backend.routes.forum import forum_bp
from backend.routes.reviews import reviews_bp
from backend.routes.moderation import moderation_bp
from backend.routes.search import search_bp

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–ª—é–ø—Ä–∏–Ω—Ç—ã
app.register_blueprint(auth_bp, url_prefix='/api/auth')
app.register_blueprint(catalog_bp, url_prefix='/api/catalog')
app.register_blueprint(forum_bp, url_prefix='/api/forum')
app.register_blueprint(reviews_bp, url_prefix='/api/reviews')
app.register_blueprint(moderation_bp, url_prefix='/api/moderation')
app.register_blueprint(search_bp, url_prefix='/api/search')

@app.route('/')
def index():
    try:
        return send_from_directory(FRONTEND_DIR, 'index.html')
    except Exception as e:
        return jsonify({'error': f'Frontend directory not found: {FRONTEND_DIR}', 'exception': str(e)}), 500

@app.route('/js/<path:filename>')
def serve_js(filename):
    return send_from_directory(os.path.join(FRONTEND_DIR, 'js'), filename)

@app.route('/css/<path:filename>')
def serve_css(filename):
    return send_from_directory(os.path.join(FRONTEND_DIR, 'css'), filename)

@app.route('/<path:filename>')
def serve_html(filename):
    # –ò—Å–∫–ª—é—á–∞–µ–º API –º–∞—Ä—à—Ä—É—Ç—ã
    if filename.startswith('api/'):
        return jsonify({'error': 'Not found'}), 404
    return send_from_directory(FRONTEND_DIR, filename)

@app.route('/test')
def test():
    return '''
    <!DOCTYPE html>
    <html>
    <head>
        <title>Test Page</title>
    </head>
    <body>
        <h1>Test Page Works!</h1>
        <p>Frontend directory: {}</p>
        <p>Frontend exists: {}</p>
        <p><a href="/api/health">Check API Health</a></p>
    </body>
    </html>
    '''.format(FRONTEND_DIR, os.path.exists(FRONTEND_DIR))

@app.route('/api/init-db', methods=['POST'])
def init_database():
    try:
        with app.app_context():
            db.create_all()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã
            from backend.models import User
            user_count = User.query.count()
            
            # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            admin_user = User.query.filter_by(email='admin@test.com').first()
            admin_created = False
            if not admin_user:
                from werkzeug.security import generate_password_hash
                admin_user = User(
                    email='admin@test.com',
                    password=generate_password_hash('admin123'),
                    name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                    role='admin'
                )
                db.session.add(admin_user)
                db.session.commit()
                admin_created = True
                
        return jsonify({
            'message': 'Database initialized successfully',
            'user_count': user_count,
            'admin_created': admin_created
        }), 200
    except Exception as e:
        return jsonify({
            'error': f'Database initialization failed: {str(e)}'
        }), 500

@app.route('/api/health')
def health_check():
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.session.execute('SELECT 1')
        db_status = 'connected'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        from backend.models import User
        admin_user = User.query.filter_by(email='admin@test.com').first()
        admin_exists = admin_user is not None
        
    except Exception as e:
        db_status = f'error: {str(e)}'
        admin_exists = False
    
    return jsonify({
        'status': 'ok', 
        'message': 'Server is running', 
        'timestamp': datetime.utcnow().isoformat(),
        'frontend_dir': FRONTEND_DIR,
        'frontend_exists': os.path.exists(FRONTEND_DIR),
        'database_status': db_status,
        'admin_exists': admin_exists
    })

@app.route('/api/update-db', methods=['GET', 'POST'])
def update_database():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"""
    try:
        from sqlalchemy import text
        
        print("üîß –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è password
        result = db.session.execute(text("""
            SELECT character_maximum_length 
            FROM information_schema.columns 
            WHERE table_name = 'user' AND column_name = 'password'
        """))
        
        current_length = result.fetchone()
        if current_length:
            print(f"üìè –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è password: {current_length[0]} —Å–∏–º–≤–æ–ª–æ–≤")
            
            if current_length[0] < 200:
                print("üîß –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è password –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤...")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è password
                db.session.execute(text("ALTER TABLE \"user\" ALTER COLUMN password TYPE VARCHAR(200)"))
                db.session.commit()
                
                print("‚úÖ –ü–æ–ª–µ password —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
                
                return jsonify({
                    'success': True,
                    'message': '–ü–æ–ª–µ password —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤!',
                    'old_length': current_length[0],
                    'new_length': 200
                })
            else:
                return jsonify({
                    'success': True,
                    'message': '–ü–æ–ª–µ password —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä',
                    'current_length': current_length[0]
                })
        else:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ user –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return jsonify({
                'success': False,
                'error': '–¢–∞–±–ª–∏—Ü–∞ user –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            }), 404
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.session.rollback()
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}'
        }), 500

@app.route('/api/update-comment-photos', methods=['GET', 'POST'])
def update_comment_photos():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è photos –≤ —Ç–∞–±–ª–∏—Ü—É comment"""
    try:
        from sqlalchemy import text
        
        print("üîß –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ photos –≤ —Ç–∞–±–ª–∏—Ü—É comment...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª–µ photos
        result = db.session.execute(text("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'comment' AND column_name = 'photos'
        """))
        
        if result.fetchone():
            print("‚ÑπÔ∏è –ü–æ–ª–µ photos —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ comment")
            return jsonify({
                'success': True,
                'message': '–ü–æ–ª–µ photos —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ comment'
            })
        else:
            print("üîß –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ photos –≤ —Ç–∞–±–ª–∏—Ü—É comment...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ photos
            db.session.execute(text("ALTER TABLE comment ADD COLUMN photos TEXT"))
            db.session.commit()
            
            print("‚úÖ –ü–æ–ª–µ photos —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É comment!")
            
            return jsonify({
                'success': True,
                'message': '–ü–æ–ª–µ photos —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É comment!'
            })
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è photos: {e}")
        db.session.rollback()
        return jsonify({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è photos: {str(e)}'
        }), 500

@app.errorhandler(404)
def not_found(error):
    return jsonify({'error': 'Not found'}), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({
        'error': 'Internal server error',
        'details': str(error)
    }), 500

@app.route('/api/upload', methods=['POST'])
@jwt_required()
def upload_file():
    if 'file' not in request.files:
        return jsonify({'error': 'No file provided'}), 400
    
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No file selected'}), 400
    
    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        # –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S_')
        filename = timestamp + filename
        
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(file_path)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL —Ñ–∞–π–ª–∞
        file_url = f'/static/uploads/{filename}'
        return jsonify({'url': file_url, 'filename': filename})
    
    return jsonify({'error': 'Invalid file type'}), 400

def allowed_file(filename):
    ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'webp'}
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/static/uploads/<filename>')
def uploaded_file(filename):
    try:
        print(f"üìÅ –ó–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–∞: {filename}")
        print(f"üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {os.path.join(app.config['UPLOAD_FOLDER'], filename)}")
        print(f"üìÅ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(os.path.join(app.config['UPLOAD_FOLDER'], filename))}")
        
        return send_from_directory(app.config['UPLOAD_FOLDER'], filename)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
        return jsonify({'error': 'File not found'}), 404

@app.route('/uploads/<filename>')
def uploaded_file_alt(filename):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    try:
        print(f"üìÅ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–∞: {filename}")
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        print(f"üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {file_path}")
        print(f"üìÅ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(file_path)}")
        
        if os.path.exists(file_path):
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return jsonify({'error': 'File not found'}), 404
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
        return jsonify({'error': 'File not found'}), 404

@app.route('/api/debug-uploads')
def debug_uploads():
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        upload_folder = app.config['UPLOAD_FOLDER']
        files = []
        
        if os.path.exists(upload_folder):
            for filename in os.listdir(upload_folder):
                file_path = os.path.join(upload_folder, filename)
                if os.path.isfile(file_path):
                    files.append({
                        'name': filename,
                        'size': os.path.getsize(file_path),
                        'path': file_path
                    })
        
        return jsonify({
            'upload_folder': upload_folder,
            'folder_exists': os.path.exists(upload_folder),
            'files': files,
            'file_count': len(files)
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
@app.route('/api/upload-photos', methods=['POST'])
def upload_photos():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –æ—Ç–∑—ã–≤–æ–≤"""
    try:
        if 'photos' not in request.files:
            return jsonify({'error': 'No photos provided'}), 400
        
        files = request.files.getlist('photos')
        
        if len(files) > 5:
            return jsonify({'error': 'Maximum 5 photos allowed'}), 400
        
        uploaded_files = []
        
        for file in files:
            if file and file.filename:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                if not file.filename.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.webp')):
                    return jsonify({'error': 'Only image files are allowed'}), 400
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (5MB)
                file_content = file.read()
                if len(file_content) > 5 * 1024 * 1024:
                    return jsonify({'error': 'File size too large (max 5MB)'}), 400
                
                file.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                filename = secure_filename(file.filename)
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                unique_filename = f"{timestamp}_{filename}"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                file_path = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)
                print(f"üìÅ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª: {file_path}")
                print(f"üìÅ –ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫: {app.config['UPLOAD_FOLDER']}")
                print(f"üìÅ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(app.config['UPLOAD_FOLDER'])}")
                
                file.save(file_path)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
                if os.path.exists(file_path):
                    print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
                else:
                    print(f"‚ùå –§–∞–π–ª –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è: {file_path}")
                
                uploaded_files.append(unique_filename)
        
        return jsonify({
            'message': 'Photos uploaded successfully',
            'files': uploaded_files
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {e}")
        return jsonify({'error': 'Failed to upload photos'}), 500

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with app.app_context():
        try:
            print(f"üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {app.config['SQLALCHEMY_DATABASE_URI']}")
        db.create_all()
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            
            # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            from backend.models import User
            admin_user = User.query.filter_by(email='admin@test.com').first()
            if not admin_user:
                from werkzeug.security import generate_password_hash
                admin_user = User(
                    email='admin@test.com',
                    password=generate_password_hash('admin123'),
                    name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                    role='admin'
                )
                db.session.add(admin_user)
                db.session.commit()
                print("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: admin@test.com / admin123")
            else:
                print("‚ÑπÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_db()

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
